.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "zazen" "1" "2024-08-04" "" ""
.SH NAME
zazen - offer a better workflow for developer using git and rust
.SH SYNOPSIS
zazen
.SH DESCRIPTION
What are they?
.PP
Commit Message Management: The practice of writing clear, consistent,
and informative commit messages to improve project collaboration and
understanding.
.PP
Cosmic Commit Types: A specific convention for commit messages that uses
terms and concepts from astronomy and space exploration to categories
changes.
.PP
This makes messages more engaging and easier to interpret.
Why use commit message management?
.PP
Enhanced Collaboration: Clear messages help team members understand the
context and purpose of each change.
.PP
Improved History Tracking: Well-structured commit logs make it easier to
trace the development process, find specific changes, and generate
meaningful change logs.
.PP
Streamlined Review: Concise and descriptive messages simplify code
reviews and help identify potential issues faster.
.IP "1." 3
Team Adoption:
.PP
Discuss and Agree: Initiate a conversation with your team about using
cosmic commit types.
Explain the benefits, share this comprehensive guide, and gather
feedback.
Customize: Collaboratively decide on the specific commit types you want
to use.
You can start with the comprehensive list provided here and tailor it to
your project\[cq]s specific needs and preferences.
Document: Create a clear and concise reference document outlining the
chosen commit types, their meanings, and examples.
Make this document easily accessible to all team members.
.IP "2." 3
Implementation:
.PP
Manual Approach: You can start using cosmic commit types manually by
simply adhering to the (): format in your commit messages.
.PP
Git Commit Template: Create a Git commit template file (e.g.,
\&.gitmessage) to automatically populate the commit message format in
your editor.
This can help enforce consistency and remind contributors of the
available commit types.
.PP
Git Hooks: Utilize Git hooks, like the prepare-commit-msg hook, to
validate your commit messages and ensure they conform to the chosen
format.
Automated Tools: Consider leveraging tools like commitizen or cz-cli
that provide interactive prompts for creating commit messages according
to your chosen convention.
These tools can streamline the process and enforce consistency across
your team.
.IP "3." 3
Continuous Improvement:
.PP
Regular Review: Periodically review your team\[cq]s commit history to
ensure consistent usage of the cosmic commit types and identify any
areas where the format could be refined or improved.
.PP
Feedback Loop: Encourage open communication and feedback from your team
members about the effectiveness of the chosen commit types and any
suggestions for improvement.
.PP
Iterative Refinement: Don\[cq]t be afraid to experiment and adapt the
commit types to better suit your evolving project needs.
The key is to find a system that works well for your team and enhances
your Git workflow.
.IP "4." 3
Continuous Improvement:
.PP
Encourage Creativity: While maintaining consistency, allow team members
to add their own flair and personality to the commit messages within the
established framework.
.PP
Celebrate Milestones: Use special event commit types like \[lq]Moon
Landing\[rq] to celebrate significant achievements and keep your team
motivated.
Integration with Other Tools: Explore integration options with your
issue tracking system, CI/CD pipeline, or documentation tools to
automate processes and maximize the benefits of using cosmic commit
types.
.PP
By embracing this comprehensive guide and incorporating cosmic commit
types into your Git workflow, you can transform your commit history into
a vibrant, informative, and enjoyable reflection of your project\[cq]s
journey.
.PP
The overall goal of Cosmic Commits is to make Git commit messages more
informative, engaging, and enjoyable for developers, ultimately leading
to better collaboration, maintainability, and understanding of the
project\[cq]s history.
.PP
Why automate commit messages?
.PP
While Angular Commit Message Conventions provide a clear and structured
format, enforcing it manually can be cumbersome and error-prone.
Automated commit message generation tools help you:
.PP
Ensure Consistency: All commit messages adhere to the convention, making
the Git history more organized and easier to analyze.
.PP
Save Time: Contributors don\[cq]t have to manually format messages,
leading to a more efficient workflow.
.PP
Reduce Errors: The tool guides contributors to create valid messages,
preventing typos or inconsistencies.
.PP
Why use cosmic commit types specifically?
.PP
Descriptive: Terms like \[lq]Star\[rq] (new feature) or \[lq]Comet\[rq]
(bug fix) are instantly recognizable and convey the nature of the change
at a glance.
.PP
Engaging: The cosmic theme adds a fun and memorable element to commit
messages.
.PP
Standardize: Provides a shared vocabulary and structured format for
commit messages, improving consistency across the team.
.PP
Why cosmos commit type ?
.PP
Cosmic commit types offer a unique and engaging way to categories and
describe changes in your Git commit history.
Here\[cq]s why they are beneficial:
.PP
Enhanced Clarity and Communication:
.PP
Descriptive Labels: Using terms like \[lq]Star\[rq] for new features,
\[lq]Comet\[rq] for bug fixes, or \[lq]Nebula\[rq] for refactoring
instantly conveys the nature of the change to anyone reading the commit
log.
This improves communication and understanding within the team.
.PP
Visual Scanning: The use of vivid imagery associated with celestial
bodies and events makes it easier to quickly scan through a commit
history and identify specific types of changes.
.PP
Contextual Information: The optional addition of a scope within the
commit message provides further context about which part of the code
base was affected (e.g., \[lq]Star(UI)\[rq] for a new UI feature).
.PP
Improved Organization and Maintainability:
.PP
Structured Format: The consistent format of cosmic commit messages
(e.g., \[lq]Type(Scope): Short summary\[rq]) makes the commit history
more organized and easier to parse.
This helps with tasks like generating change logs or filtering commits
based on specific criteria.
.PP
Streamlined History: A well-organized commit history makes it easier to
track the evolution of the project, identify patterns, and quickly
pinpoint the introduction of specific changes.
.PP
Increased Engagement and Fun:
.PP
Creative Expression: The cosmic theme adds a touch of personality and
fun to the often mundane task of writing commit messages.
It can make the development process more enjoyable and engaging for the
team.
.PP
Shared Vocabulary: Using a common set of commit types fosters a sense of
shared understanding and camaraderie within the team.
It can also serve as a fun conversation starter or icebreaker.
.PP
Automation and Tooling:
.PP
Change log Generation: Many tools can automatically generate change logs
or release notes by parsing commit messages.
Cosmic commit types make this process even easier by providing a clear
structure and consistent vocabulary that tools can easily understand.
.PP
Issue Tracking Integration: If you reference issue numbers in your
commit messages, some tools can automatically link commits to their
corresponding issues, streamlining your workflow and keeping your
project management tools up-to-date.
.SH OPTIONS
.SH EXAMPLES
zazen
.SH SEE ALSO
git(1), cargo(1)
